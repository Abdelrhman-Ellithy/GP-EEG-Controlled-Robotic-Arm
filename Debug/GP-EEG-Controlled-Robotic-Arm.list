
GP-EEG-Controlled-Robotic-Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f34  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001064  08001064  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001064  08001064  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08001064  08001064  00011064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800106c  0800106c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800106c  0800106c  0001106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000002c  080010a0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080010a0  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002334  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d66  00000000  00000000  000223cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  00023138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b5  00000000  00000000  00023500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000139d  00000000  00000000  000237b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001925  00000000  00000000  00024b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000066f2  00000000  00000000  00026477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000cb8  00000000  00000000  0002cb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0002d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	0800104c 	.word	0x0800104c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	0800104c 	.word	0x0800104c

08000170 <__aeabi_uldivmod>:
 8000170:	b953      	cbnz	r3, 8000188 <__aeabi_uldivmod+0x18>
 8000172:	b94a      	cbnz	r2, 8000188 <__aeabi_uldivmod+0x18>
 8000174:	2900      	cmp	r1, #0
 8000176:	bf08      	it	eq
 8000178:	2800      	cmpeq	r0, #0
 800017a:	bf1c      	itt	ne
 800017c:	f04f 31ff 	movne.w	r1, #4294967295
 8000180:	f04f 30ff 	movne.w	r0, #4294967295
 8000184:	f000 b972 	b.w	800046c <__aeabi_idiv0>
 8000188:	f1ad 0c08 	sub.w	ip, sp, #8
 800018c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000190:	f000 f806 	bl	80001a0 <__udivmoddi4>
 8000194:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800019c:	b004      	add	sp, #16
 800019e:	4770      	bx	lr

080001a0 <__udivmoddi4>:
 80001a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001a4:	9e08      	ldr	r6, [sp, #32]
 80001a6:	460d      	mov	r5, r1
 80001a8:	4604      	mov	r4, r0
 80001aa:	468e      	mov	lr, r1
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d14c      	bne.n	800024a <__udivmoddi4+0xaa>
 80001b0:	428a      	cmp	r2, r1
 80001b2:	4694      	mov	ip, r2
 80001b4:	d967      	bls.n	8000286 <__udivmoddi4+0xe6>
 80001b6:	fab2 f382 	clz	r3, r2
 80001ba:	b153      	cbz	r3, 80001d2 <__udivmoddi4+0x32>
 80001bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80001c0:	f1c3 0220 	rsb	r2, r3, #32
 80001c4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001c8:	fa20 f202 	lsr.w	r2, r0, r2
 80001cc:	ea42 0e0e 	orr.w	lr, r2, lr
 80001d0:	409c      	lsls	r4, r3
 80001d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001d6:	fbbe f1f7 	udiv	r1, lr, r7
 80001da:	fa1f f58c 	uxth.w	r5, ip
 80001de:	fb07 ee11 	mls	lr, r7, r1, lr
 80001e2:	fb01 f005 	mul.w	r0, r1, r5
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001ec:	4290      	cmp	r0, r2
 80001ee:	d90a      	bls.n	8000206 <__udivmoddi4+0x66>
 80001f0:	eb1c 0202 	adds.w	r2, ip, r2
 80001f4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001f8:	f080 8119 	bcs.w	800042e <__udivmoddi4+0x28e>
 80001fc:	4290      	cmp	r0, r2
 80001fe:	f240 8116 	bls.w	800042e <__udivmoddi4+0x28e>
 8000202:	3902      	subs	r1, #2
 8000204:	4462      	add	r2, ip
 8000206:	1a12      	subs	r2, r2, r0
 8000208:	fbb2 f0f7 	udiv	r0, r2, r7
 800020c:	fb07 2210 	mls	r2, r7, r0, r2
 8000210:	fb00 f505 	mul.w	r5, r0, r5
 8000214:	b2a4      	uxth	r4, r4
 8000216:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021a:	42a5      	cmp	r5, r4
 800021c:	d90a      	bls.n	8000234 <__udivmoddi4+0x94>
 800021e:	eb1c 0404 	adds.w	r4, ip, r4
 8000222:	f100 32ff 	add.w	r2, r0, #4294967295
 8000226:	f080 8104 	bcs.w	8000432 <__udivmoddi4+0x292>
 800022a:	42a5      	cmp	r5, r4
 800022c:	f240 8101 	bls.w	8000432 <__udivmoddi4+0x292>
 8000230:	4464      	add	r4, ip
 8000232:	3802      	subs	r0, #2
 8000234:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000238:	2100      	movs	r1, #0
 800023a:	1b64      	subs	r4, r4, r5
 800023c:	b11e      	cbz	r6, 8000246 <__udivmoddi4+0xa6>
 800023e:	40dc      	lsrs	r4, r3
 8000240:	2300      	movs	r3, #0
 8000242:	e9c6 4300 	strd	r4, r3, [r6]
 8000246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024a:	428b      	cmp	r3, r1
 800024c:	d908      	bls.n	8000260 <__udivmoddi4+0xc0>
 800024e:	2e00      	cmp	r6, #0
 8000250:	f000 80ea 	beq.w	8000428 <__udivmoddi4+0x288>
 8000254:	2100      	movs	r1, #0
 8000256:	e9c6 0500 	strd	r0, r5, [r6]
 800025a:	4608      	mov	r0, r1
 800025c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000260:	fab3 f183 	clz	r1, r3
 8000264:	2900      	cmp	r1, #0
 8000266:	d148      	bne.n	80002fa <__udivmoddi4+0x15a>
 8000268:	42ab      	cmp	r3, r5
 800026a:	d302      	bcc.n	8000272 <__udivmoddi4+0xd2>
 800026c:	4282      	cmp	r2, r0
 800026e:	f200 80f8 	bhi.w	8000462 <__udivmoddi4+0x2c2>
 8000272:	1a84      	subs	r4, r0, r2
 8000274:	eb65 0203 	sbc.w	r2, r5, r3
 8000278:	2001      	movs	r0, #1
 800027a:	4696      	mov	lr, r2
 800027c:	2e00      	cmp	r6, #0
 800027e:	d0e2      	beq.n	8000246 <__udivmoddi4+0xa6>
 8000280:	e9c6 4e00 	strd	r4, lr, [r6]
 8000284:	e7df      	b.n	8000246 <__udivmoddi4+0xa6>
 8000286:	b902      	cbnz	r2, 800028a <__udivmoddi4+0xea>
 8000288:	deff      	udf	#255	; 0xff
 800028a:	fab2 f382 	clz	r3, r2
 800028e:	2b00      	cmp	r3, #0
 8000290:	f040 808e 	bne.w	80003b0 <__udivmoddi4+0x210>
 8000294:	1a88      	subs	r0, r1, r2
 8000296:	2101      	movs	r1, #1
 8000298:	0c17      	lsrs	r7, r2, #16
 800029a:	fa1f fe82 	uxth.w	lr, r2
 800029e:	fbb0 f5f7 	udiv	r5, r0, r7
 80002a2:	fb07 0015 	mls	r0, r7, r5, r0
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ac:	fb0e f005 	mul.w	r0, lr, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d908      	bls.n	80002c6 <__udivmoddi4+0x126>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x124>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f200 80cc 	bhi.w	800045c <__udivmoddi4+0x2bc>
 80002c4:	4645      	mov	r5, r8
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002cc:	fb07 2210 	mls	r2, r7, r0, r2
 80002d0:	fb0e fe00 	mul.w	lr, lr, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	45a6      	cmp	lr, r4
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0x150>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x14e>
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	f200 80b4 	bhi.w	8000456 <__udivmoddi4+0x2b6>
 80002ee:	4610      	mov	r0, r2
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002f8:	e7a0      	b.n	800023c <__udivmoddi4+0x9c>
 80002fa:	f1c1 0720 	rsb	r7, r1, #32
 80002fe:	408b      	lsls	r3, r1
 8000300:	fa22 fc07 	lsr.w	ip, r2, r7
 8000304:	ea4c 0c03 	orr.w	ip, ip, r3
 8000308:	fa25 fa07 	lsr.w	sl, r5, r7
 800030c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000310:	fbba f8f9 	udiv	r8, sl, r9
 8000314:	408d      	lsls	r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	fb09 aa18 	mls	sl, r9, r8, sl
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	432b      	orrs	r3, r5
 8000324:	fa00 f501 	lsl.w	r5, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90b      	bls.n	8000352 <__udivmoddi4+0x1b2>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000342:	f080 8086 	bcs.w	8000452 <__udivmoddi4+0x2b2>
 8000346:	42a0      	cmp	r0, r4
 8000348:	f240 8083 	bls.w	8000452 <__udivmoddi4+0x2b2>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4464      	add	r4, ip
 8000352:	1a24      	subs	r4, r4, r0
 8000354:	b298      	uxth	r0, r3
 8000356:	fbb4 f3f9 	udiv	r3, r4, r9
 800035a:	fb09 4413 	mls	r4, r9, r3, r4
 800035e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000362:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1dc>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d26a      	bcs.n	800044a <__udivmoddi4+0x2aa>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d968      	bls.n	800044a <__udivmoddi4+0x2aa>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 9302 	umull	r9, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c8      	mov	r8, r9
 800038c:	469e      	mov	lr, r3
 800038e:	d354      	bcc.n	800043a <__udivmoddi4+0x29a>
 8000390:	d051      	beq.n	8000436 <__udivmoddi4+0x296>
 8000392:	2e00      	cmp	r6, #0
 8000394:	d067      	beq.n	8000466 <__udivmoddi4+0x2c6>
 8000396:	ebb5 0308 	subs.w	r3, r5, r8
 800039a:	eb64 040e 	sbc.w	r4, r4, lr
 800039e:	40cb      	lsrs	r3, r1
 80003a0:	fa04 f707 	lsl.w	r7, r4, r7
 80003a4:	431f      	orrs	r7, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c6 7400 	strd	r7, r4, [r6]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74a      	b.n	8000246 <__udivmoddi4+0xa6>
 80003b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b4:	f1c3 0020 	rsb	r0, r3, #32
 80003b8:	40c1      	lsrs	r1, r0
 80003ba:	409d      	lsls	r5, r3
 80003bc:	fa24 f000 	lsr.w	r0, r4, r0
 80003c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c4:	4328      	orrs	r0, r5
 80003c6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003ca:	fb07 1115 	mls	r1, r7, r5, r1
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	0c02      	lsrs	r2, r0, #16
 80003d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003d8:	fb05 f10e 	mul.w	r1, r5, lr
 80003dc:	4291      	cmp	r1, r2
 80003de:	fa04 f403 	lsl.w	r4, r4, r3
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x256>
 80003e4:	eb1c 0202 	adds.w	r2, ip, r2
 80003e8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ec:	d22f      	bcs.n	800044e <__udivmoddi4+0x2ae>
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d92d      	bls.n	800044e <__udivmoddi4+0x2ae>
 80003f2:	3d02      	subs	r5, #2
 80003f4:	4462      	add	r2, ip
 80003f6:	1a52      	subs	r2, r2, r1
 80003f8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003fc:	fb07 2211 	mls	r2, r7, r1, r2
 8000400:	b280      	uxth	r0, r0
 8000402:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000406:	fb01 f20e 	mul.w	r2, r1, lr
 800040a:	4282      	cmp	r2, r0
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x280>
 800040e:	eb1c 0000 	adds.w	r0, ip, r0
 8000412:	f101 38ff 	add.w	r8, r1, #4294967295
 8000416:	d216      	bcs.n	8000446 <__udivmoddi4+0x2a6>
 8000418:	4282      	cmp	r2, r0
 800041a:	d914      	bls.n	8000446 <__udivmoddi4+0x2a6>
 800041c:	3902      	subs	r1, #2
 800041e:	4460      	add	r0, ip
 8000420:	1a80      	subs	r0, r0, r2
 8000422:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000426:	e73a      	b.n	800029e <__udivmoddi4+0xfe>
 8000428:	4631      	mov	r1, r6
 800042a:	4630      	mov	r0, r6
 800042c:	e70b      	b.n	8000246 <__udivmoddi4+0xa6>
 800042e:	4671      	mov	r1, lr
 8000430:	e6e9      	b.n	8000206 <__udivmoddi4+0x66>
 8000432:	4610      	mov	r0, r2
 8000434:	e6fe      	b.n	8000234 <__udivmoddi4+0x94>
 8000436:	454d      	cmp	r5, r9
 8000438:	d2ab      	bcs.n	8000392 <__udivmoddi4+0x1f2>
 800043a:	ebb9 0802 	subs.w	r8, r9, r2
 800043e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000442:	3801      	subs	r0, #1
 8000444:	e7a5      	b.n	8000392 <__udivmoddi4+0x1f2>
 8000446:	4641      	mov	r1, r8
 8000448:	e7ea      	b.n	8000420 <__udivmoddi4+0x280>
 800044a:	4603      	mov	r3, r0
 800044c:	e796      	b.n	800037c <__udivmoddi4+0x1dc>
 800044e:	4645      	mov	r5, r8
 8000450:	e7d1      	b.n	80003f6 <__udivmoddi4+0x256>
 8000452:	46d0      	mov	r8, sl
 8000454:	e77d      	b.n	8000352 <__udivmoddi4+0x1b2>
 8000456:	4464      	add	r4, ip
 8000458:	3802      	subs	r0, #2
 800045a:	e749      	b.n	80002f0 <__udivmoddi4+0x150>
 800045c:	3d02      	subs	r5, #2
 800045e:	4462      	add	r2, ip
 8000460:	e731      	b.n	80002c6 <__udivmoddi4+0x126>
 8000462:	4608      	mov	r0, r1
 8000464:	e70a      	b.n	800027c <__udivmoddi4+0xdc>
 8000466:	4631      	mov	r1, r6
 8000468:	e6ed      	b.n	8000246 <__udivmoddi4+0xa6>
 800046a:	bf00      	nop

0800046c <__aeabi_idiv0>:
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <SERVO_Init>:
#include "HAL/Servo/Servo_Interface.h"
#include "HAL/Servo/Servo_conifg.h"
#include "HAL/Servo/Servo_private.h"
#include "MCAL/GPIO/GPIO_interface.h"
#include "MCAL/TIMER1/TIMER1_interface.h"
void SERVO_Init(ServoID_t  servo){
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	TIMER1_InitPwmChannel(servo);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fbb1 	bl	8000be4 <TIMER1_InitPwmChannel>
	TIMER1_SetFREQ(servo,SERVO_FREQUENCY);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2132      	movs	r1, #50	; 0x32
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fc44 	bl	8000d14 <TIMER1_SetFREQ>
	Servo_setAngle(servo,0);
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f805 	bl	80004a0 <Servo_setAngle>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <Servo_setAngle>:

void Servo_setAngle(ServoID_t servo, u8 angle){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	460a      	mov	r2, r1
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	4613      	mov	r3, r2
 80004ae:	71bb      	strb	r3, [r7, #6]
	u32 loc_angle=angle;
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	60fb      	str	r3, [r7, #12]
	u16 loc_Value= (u16)((u32)((u32)((loc_angle*100U) )/9U)+1999 );
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	2264      	movs	r2, #100	; 0x64
 80004b8:	fb02 f303 	mul.w	r3, r2, r3
 80004bc:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <Servo_setAngle+0x40>)
 80004be:	fba2 2303 	umull	r2, r3, r2, r3
 80004c2:	085b      	lsrs	r3, r3, #1
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 80004ca:	817b      	strh	r3, [r7, #10]
	TIMER1_Set_CRR_Value(servo,loc_Value);
 80004cc:	897a      	ldrh	r2, [r7, #10]
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4611      	mov	r1, r2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fc5e 	bl	8000d94 <TIMER1_Set_CRR_Value>
}
 80004d8:	bf00      	nop
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	38e38e39 	.word	0x38e38e39

080004e4 <DMA1_Channel1_IRQHandler>:

	SET_BIT( DMA->IFCR , (ChannelNumber + Copy_u8Flag) );

}
/* DMA1 Channel1 global interrupt                   */
void	DMA1_Channel1_IRQHandler  (void){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[0]!=NULL){
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <DMA1_Channel1_IRQHandler+0x18>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <DMA1_Channel1_IRQHandler+0x12>
		Setcallbaks_Ptr[0]();
 80004f0:	4b02      	ldr	r3, [pc, #8]	; (80004fc <DMA1_Channel1_IRQHandler+0x18>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4798      	blx	r3
	}
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000048 	.word	0x20000048

08000500 <DMA1_Channel2_IRQHandler>:


/* DMA1 Channel2 global interrupt                   */
void	DMA1_Channel2_IRQHandler  (void){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[1]!=NULL){
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <DMA1_Channel2_IRQHandler+0x18>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <DMA1_Channel2_IRQHandler+0x12>
		Setcallbaks_Ptr[1]();
 800050c:	4b02      	ldr	r3, [pc, #8]	; (8000518 <DMA1_Channel2_IRQHandler+0x18>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4798      	blx	r3
	}
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000048 	.word	0x20000048

0800051c <DMA1_Channel3_IRQHandler>:



/* DMA1 Channel3 global interrupt                   */
void	DMA1_Channel3_IRQHandler  (void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[2]!=NULL){
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <DMA1_Channel3_IRQHandler+0x18>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <DMA1_Channel3_IRQHandler+0x12>
		Setcallbaks_Ptr[2]();
 8000528:	4b02      	ldr	r3, [pc, #8]	; (8000534 <DMA1_Channel3_IRQHandler+0x18>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	4798      	blx	r3
	}
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000048 	.word	0x20000048

08000538 <DMA1_Channel4_IRQHandler>:


/* DMA1 Channel4 global interrupt                   */
void	DMA1_Channel4_IRQHandler  (void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[3]!=NULL){
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <DMA1_Channel4_IRQHandler+0x18>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <DMA1_Channel4_IRQHandler+0x12>
		Setcallbaks_Ptr[3]();
 8000544:	4b02      	ldr	r3, [pc, #8]	; (8000550 <DMA1_Channel4_IRQHandler+0x18>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4798      	blx	r3
	}
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000048 	.word	0x20000048

08000554 <DMA1_Channel5_IRQHandler>:

/* DMA1 Channel5 global interrupt                   */
void	DMA1_Channel5_IRQHandler  (void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[4]!=NULL){
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <DMA1_Channel5_IRQHandler+0x18>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d002      	beq.n	8000566 <DMA1_Channel5_IRQHandler+0x12>
		Setcallbaks_Ptr[4]();
 8000560:	4b02      	ldr	r3, [pc, #8]	; (800056c <DMA1_Channel5_IRQHandler+0x18>)
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	4798      	blx	r3
	}
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000048 	.word	0x20000048

08000570 <DMA1_Channel6_IRQHandler>:


/* DMA1 Channel6 global interrupt                   */
void	DMA1_Channel6_IRQHandler  (void){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[5]!=NULL){
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <DMA1_Channel6_IRQHandler+0x18>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <DMA1_Channel6_IRQHandler+0x12>
		Setcallbaks_Ptr[5]();
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <DMA1_Channel6_IRQHandler+0x18>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	4798      	blx	r3
	}
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000048 	.word	0x20000048

0800058c <DMA1_Channel7_IRQHandler>:


/* DMA1 Channel7 global interrupt                   */
void	DMA1_Channel7_IRQHandler  (void){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[6]!=NULL){
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <DMA1_Channel7_IRQHandler+0x18>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <DMA1_Channel7_IRQHandler+0x12>
		Setcallbaks_Ptr[6]();
 8000598:	4b02      	ldr	r3, [pc, #8]	; (80005a4 <DMA1_Channel7_IRQHandler+0x18>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4798      	blx	r3
	}
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000048 	.word	0x20000048

080005a8 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 0);
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <EXTI0_IRQHandler+0x1c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[0] != NULL )
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <EXTI0_IRQHandler+0x20>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <EXTI0_IRQHandler+0x18>
	{
		EXTI_CallBacks[0]();
 80005ba:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <EXTI0_IRQHandler+0x20>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4798      	blx	r3
	}
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010400 	.word	0x40010400
 80005c8:	20000064 	.word	0x20000064

080005cc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 1);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <EXTI1_IRQHandler+0x1c>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[1] != NULL )
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <EXTI1_IRQHandler+0x20>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <EXTI1_IRQHandler+0x18>
	{
		EXTI_CallBacks[1]();
 80005de:	4b03      	ldr	r3, [pc, #12]	; (80005ec <EXTI1_IRQHandler+0x20>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	4798      	blx	r3
	}
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40010400 	.word	0x40010400
 80005ec:	20000064 	.word	0x20000064

080005f0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 2);
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <EXTI2_IRQHandler+0x1c>)
 80005f6:	2204      	movs	r2, #4
 80005f8:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[2] != NULL )
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <EXTI2_IRQHandler+0x20>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <EXTI2_IRQHandler+0x18>
	{
		EXTI_CallBacks[2]();
 8000602:	4b03      	ldr	r3, [pc, #12]	; (8000610 <EXTI2_IRQHandler+0x20>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	4798      	blx	r3
	}
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40010400 	.word	0x40010400
 8000610:	20000064 	.word	0x20000064

08000614 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 3);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <EXTI3_IRQHandler+0x1c>)
 800061a:	2208      	movs	r2, #8
 800061c:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[3] != NULL )
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <EXTI3_IRQHandler+0x20>)
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <EXTI3_IRQHandler+0x18>
	{
		EXTI_CallBacks[3]();
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <EXTI3_IRQHandler+0x20>)
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	4798      	blx	r3
	}
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40010400 	.word	0x40010400
 8000634:	20000064 	.word	0x20000064

08000638 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 4);
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <EXTI4_IRQHandler+0x1c>)
 800063e:	2210      	movs	r2, #16
 8000640:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[4] != NULL )
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <EXTI4_IRQHandler+0x20>)
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <EXTI4_IRQHandler+0x18>
	{
		EXTI_CallBacks[4]();
 800064a:	4b03      	ldr	r3, [pc, #12]	; (8000658 <EXTI4_IRQHandler+0x20>)
 800064c:	691b      	ldr	r3, [r3, #16]
 800064e:	4798      	blx	r3
	}
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40010400 	.word	0x40010400
 8000658:	20000064 	.word	0x20000064

0800065c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	for (u8 i = 5 ; i <= 9 ; i++)
 8000662:	2305      	movs	r3, #5
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	e024      	b.n	80006b2 <EXTI9_5_IRQHandler+0x56>
	{
		if(GET_BIT(EXTI->PR,i) == 1 && GET_BIT(EXTI->IMR,i) == 1)
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <EXTI9_5_IRQHandler+0x68>)
 800066a:	695a      	ldr	r2, [r3, #20]
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	fa22 f303 	lsr.w	r3, r2, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b01      	cmp	r3, #1
 8000678:	d118      	bne.n	80006ac <EXTI9_5_IRQHandler+0x50>
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <EXTI9_5_IRQHandler+0x68>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	fa22 f303 	lsr.w	r3, r2, r3
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10f      	bne.n	80006ac <EXTI9_5_IRQHandler+0x50>
		{
			EXTI->PR = (1 << i);
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2201      	movs	r2, #1
 8000690:	409a      	lsls	r2, r3
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <EXTI9_5_IRQHandler+0x68>)
 8000694:	615a      	str	r2, [r3, #20]
			if(EXTI_CallBacks[i] != NULL )
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <EXTI9_5_IRQHandler+0x6c>)
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d004      	beq.n	80006ac <EXTI9_5_IRQHandler+0x50>
			{
				EXTI_CallBacks[i]();
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <EXTI9_5_IRQHandler+0x6c>)
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	4798      	blx	r3
	for (u8 i = 5 ; i <= 9 ; i++)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	3301      	adds	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b09      	cmp	r3, #9
 80006b6:	d9d7      	bls.n	8000668 <EXTI9_5_IRQHandler+0xc>
			}
		}
	}
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40010400 	.word	0x40010400
 80006c8:	20000064 	.word	0x20000064

080006cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	for (u8 i = 10 ; i <= 15 ; i++)
 80006d2:	230a      	movs	r3, #10
 80006d4:	71fb      	strb	r3, [r7, #7]
 80006d6:	e020      	b.n	800071a <EXTI15_10_IRQHandler+0x4e>
	{
		if(GET_BIT(EXTI->PR,i) == 1)
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <EXTI15_10_IRQHandler+0x60>)
 80006da:	695a      	ldr	r2, [r3, #20]
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	fa22 f303 	lsr.w	r3, r2, r3
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d114      	bne.n	8000714 <EXTI15_10_IRQHandler+0x48>
		{
			SET_BIT(EXTI->PR,i);
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <EXTI15_10_IRQHandler+0x60>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	79fa      	ldrb	r2, [r7, #7]
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a0c      	ldr	r2, [pc, #48]	; (800072c <EXTI15_10_IRQHandler+0x60>)
 80006fa:	430b      	orrs	r3, r1
 80006fc:	6153      	str	r3, [r2, #20]
			if(EXTI_CallBacks[i] != NULL )
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <EXTI15_10_IRQHandler+0x64>)
 8000702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d004      	beq.n	8000714 <EXTI15_10_IRQHandler+0x48>
			{
				EXTI_CallBacks[i]();
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <EXTI15_10_IRQHandler+0x64>)
 800070e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000712:	4798      	blx	r3
	for (u8 i = 10 ; i <= 15 ; i++)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	3301      	adds	r3, #1
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d9db      	bls.n	80006d8 <EXTI15_10_IRQHandler+0xc>
			}
		}
	}
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40010400 	.word	0x40010400
 8000730:	20000064 	.word	0x20000064

08000734 <GPIO_PORT_voidInit>:
	GPIO_Astr[Copy_PortId]->ODR|=(Copy_PortValue<<Copy_NiibleId);
}

#if NeedPortHere==1
void GPIO_PORT_voidInit(void)
{	u8 port,pin;
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e017      	b.n	8000770 <GPIO_PORT_voidInit+0x3c>
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 8000740:	2300      	movs	r3, #0
 8000742:	71bb      	strb	r3, [r7, #6]
 8000744:	e00e      	b.n	8000764 <GPIO_PORT_voidInit+0x30>
			switch(port){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d108      	bne.n	800075e <GPIO_PORT_voidInit+0x2a>
			#if PORTA_EN==1
			case GPIO_PORTA:
				GPIO_SetPinMode(port , pin, PORTA_DIR[pin]);
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <GPIO_PORT_voidInit+0x88>)
 8000750:	5cd2      	ldrb	r2, [r2, r3]
 8000752:	79b9      	ldrb	r1, [r7, #6]
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f834 	bl	80007c4 <GPIO_SetPinMode>
				break;
 800075c:	bf00      	nop
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	3301      	adds	r3, #1
 8000762:	71bb      	strb	r3, [r7, #6]
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	2b0f      	cmp	r3, #15
 8000768:	d9ed      	bls.n	8000746 <GPIO_PORT_voidInit+0x12>
	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	3301      	adds	r3, #1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d9e4      	bls.n	8000740 <GPIO_PORT_voidInit+0xc>
			#endif
			  }
			}
		}

	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	e017      	b.n	80007ac <GPIO_PORT_voidInit+0x78>
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 800077c:	2300      	movs	r3, #0
 800077e:	71bb      	strb	r3, [r7, #6]
 8000780:	e00e      	b.n	80007a0 <GPIO_PORT_voidInit+0x6c>
			switch(port){
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d108      	bne.n	800079a <GPIO_PORT_voidInit+0x66>
			#if PORTA_EN==1
			case GPIO_PORTA:
				GPIO_WritePinValue(port , pin, PORTA_init_val[pin]);
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <GPIO_PORT_voidInit+0x8c>)
 800078c:	5cd2      	ldrb	r2, [r2, r3]
 800078e:	79b9      	ldrb	r1, [r7, #6]
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f8e2 	bl	800095c <GPIO_WritePinValue>
				break;
 8000798:	bf00      	nop
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	3301      	adds	r3, #1
 800079e:	71bb      	strb	r3, [r7, #6]
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	2b0f      	cmp	r3, #15
 80007a4:	d9ed      	bls.n	8000782 <GPIO_PORT_voidInit+0x4e>
	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	3301      	adds	r3, #1
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d9e4      	bls.n	800077c <GPIO_PORT_voidInit+0x48>
			#endif
			  }
			}
		}

}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000010 	.word	0x20000010

080007c4 <GPIO_SetPinMode>:
#endif

void GPIO_SetPinMode (u8 Copy_PortId, u8 Copy_PinId, u8 Copy_PinMode)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	460b      	mov	r3, r1
 80007d0:	71bb      	strb	r3, [r7, #6]
 80007d2:	4613      	mov	r3, r2
 80007d4:	717b      	strb	r3, [r7, #5]
	if(Copy_PortId <= GPIO_PORTC)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	f200 80b7 	bhi.w	800094c <GPIO_SetPinMode+0x188>
	{
		u8 Local_PullUpDown_Flag = GET_BIT(Copy_PinMode,4); /* Equal one in case of pull up only */
 80007de:	797b      	ldrb	r3, [r7, #5]
 80007e0:	111b      	asrs	r3, r3, #4
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
		CLR_BIT(Copy_PinMode,4); /*Get the Mode back to its value if it was input pull up */
 80007ea:	797b      	ldrb	r3, [r7, #5]
 80007ec:	f023 0310 	bic.w	r3, r3, #16
 80007f0:	717b      	strb	r3, [r7, #5]

		if(Copy_PinId <= GPIO_PIN7)
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	d851      	bhi.n	800089c <GPIO_SetPinMode+0xd8>
		{
			GPIO_Astr[Copy_PortId]->CRL &= (~((0b1111) << (Copy_PinId * 4)));
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4a57      	ldr	r2, [pc, #348]	; (8000958 <GPIO_SetPinMode+0x194>)
 80007fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	79bb      	ldrb	r3, [r7, #6]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	210f      	movs	r1, #15
 8000808:	fa01 f303 	lsl.w	r3, r1, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4951      	ldr	r1, [pc, #324]	; (8000958 <GPIO_SetPinMode+0x194>)
 8000814:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000818:	4002      	ands	r2, r0
 800081a:	601a      	str	r2, [r3, #0]
			GPIO_Astr[Copy_PortId]->CRL |= (Copy_PinMode << (Copy_PinId * 4));
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4a4e      	ldr	r2, [pc, #312]	; (8000958 <GPIO_SetPinMode+0x194>)
 8000820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	7979      	ldrb	r1, [r7, #5]
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	4618      	mov	r0, r3
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4948      	ldr	r1, [pc, #288]	; (8000958 <GPIO_SetPinMode+0x194>)
 8000836:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800083a:	4302      	orrs	r2, r0
 800083c:	601a      	str	r2, [r3, #0]

			if((Copy_PinMode == GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 0))
 800083e:	797b      	ldrb	r3, [r7, #5]
 8000840:	2b08      	cmp	r3, #8
 8000842:	d114      	bne.n	800086e <GPIO_SetPinMode+0xaa>
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d111      	bne.n	800086e <GPIO_SetPinMode+0xaa>
			{
				/* Then the mode was input pull down */
				/* Turn off the internal pull up resistor */
				CLR_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4a42      	ldr	r2, [pc, #264]	; (8000958 <GPIO_SetPinMode+0x194>)
 800084e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000852:	68da      	ldr	r2, [r3, #12]
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	2101      	movs	r1, #1
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	43db      	mvns	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	493d      	ldr	r1, [pc, #244]	; (8000958 <GPIO_SetPinMode+0x194>)
 8000864:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000868:	4002      	ands	r2, r0
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	e06e      	b.n	800094c <GPIO_SetPinMode+0x188>
			}
			else if((Copy_PinMode == GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 1))
 800086e:	797b      	ldrb	r3, [r7, #5]
 8000870:	2b08      	cmp	r3, #8
 8000872:	d16b      	bne.n	800094c <GPIO_SetPinMode+0x188>
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d168      	bne.n	800094c <GPIO_SetPinMode+0x188>
			{
				/* Then the mode was input pull up */
				/* Turn on the internal pull up resistor */
				SET_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4a36      	ldr	r2, [pc, #216]	; (8000958 <GPIO_SetPinMode+0x194>)
 800087e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	4618      	mov	r0, r3
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4931      	ldr	r1, [pc, #196]	; (8000958 <GPIO_SetPinMode+0x194>)
 8000892:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000896:	4302      	orrs	r2, r0
 8000898:	60da      	str	r2, [r3, #12]
			}
		}

	}

}
 800089a:	e057      	b.n	800094c <GPIO_SetPinMode+0x188>
		else if(Copy_PinId <= GPIO_PIN15)
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d854      	bhi.n	800094c <GPIO_SetPinMode+0x188>
			Copy_PinId -= 8;
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	3b08      	subs	r3, #8
 80008a6:	71bb      	strb	r3, [r7, #6]
			GPIO_Astr[Copy_PortId]->CRH &= (~((0b1111) << (Copy_PinId * 4)));
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <GPIO_SetPinMode+0x194>)
 80008ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	210f      	movs	r1, #15
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4925      	ldr	r1, [pc, #148]	; (8000958 <GPIO_SetPinMode+0x194>)
 80008c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c8:	4002      	ands	r2, r0
 80008ca:	605a      	str	r2, [r3, #4]
			GPIO_Astr[Copy_PortId]->CRH |= (Copy_PinMode << (Copy_PinId * 4));
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4a22      	ldr	r2, [pc, #136]	; (8000958 <GPIO_SetPinMode+0x194>)
 80008d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	7979      	ldrb	r1, [r7, #5]
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	491c      	ldr	r1, [pc, #112]	; (8000958 <GPIO_SetPinMode+0x194>)
 80008e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008ea:	4302      	orrs	r2, r0
 80008ec:	605a      	str	r2, [r3, #4]
			if((Copy_PinMode == GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 0))
 80008ee:	797b      	ldrb	r3, [r7, #5]
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d114      	bne.n	800091e <GPIO_SetPinMode+0x15a>
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d111      	bne.n	800091e <GPIO_SetPinMode+0x15a>
				CLR_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4a16      	ldr	r2, [pc, #88]	; (8000958 <GPIO_SetPinMode+0x194>)
 80008fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4911      	ldr	r1, [pc, #68]	; (8000958 <GPIO_SetPinMode+0x194>)
 8000914:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000918:	4002      	ands	r2, r0
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	e016      	b.n	800094c <GPIO_SetPinMode+0x188>
			else if((Copy_PinMode ==GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 1))
 800091e:	797b      	ldrb	r3, [r7, #5]
 8000920:	2b08      	cmp	r3, #8
 8000922:	d113      	bne.n	800094c <GPIO_SetPinMode+0x188>
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d110      	bne.n	800094c <GPIO_SetPinMode+0x188>
				SET_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <GPIO_SetPinMode+0x194>)
 800092e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	4618      	mov	r0, r3
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4905      	ldr	r1, [pc, #20]	; (8000958 <GPIO_SetPinMode+0x194>)
 8000942:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000946:	4302      	orrs	r2, r0
 8000948:	60da      	str	r2, [r3, #12]
}
 800094a:	e7ff      	b.n	800094c <GPIO_SetPinMode+0x188>
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000020 	.word	0x20000020

0800095c <GPIO_WritePinValue>:

void GPIO_WritePinValue	(u8 Copy_PortId, u8 Copy_PinId, u8 Copy_u8PinValue)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	460b      	mov	r3, r1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	4613      	mov	r3, r2
 800096c:	717b      	strb	r3, [r7, #5]

	if(Copy_PortId <= GPIO_PORTC && Copy_PinId <= GPIO_PIN15)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d81d      	bhi.n	80009b0 <GPIO_WritePinValue+0x54>
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	2b0f      	cmp	r3, #15
 8000978:	d81a      	bhi.n	80009b0 <GPIO_WritePinValue+0x54>
	{
		switch(Copy_u8PinValue)
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00c      	beq.n	800099a <GPIO_WritePinValue+0x3e>
 8000980:	2b01      	cmp	r3, #1
 8000982:	d115      	bne.n	80009b0 <GPIO_WritePinValue+0x54>
		{
		case GPIO_HIGH:
			GPIO_Astr[Copy_PortId]->BSRR = (1<<Copy_PinId);
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	2201      	movs	r2, #1
 8000988:	fa02 f103 	lsl.w	r1, r2, r3
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <GPIO_WritePinValue+0x60>)
 8000990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000994:	460a      	mov	r2, r1
 8000996:	611a      	str	r2, [r3, #16]
			break;
 8000998:	e00a      	b.n	80009b0 <GPIO_WritePinValue+0x54>
		case GPIO_LOW:
			GPIO_Astr[Copy_PortId]->BRR = (1<<Copy_PinId);
 800099a:	79bb      	ldrb	r3, [r7, #6]
 800099c:	2201      	movs	r2, #1
 800099e:	fa02 f103 	lsl.w	r1, r2, r3
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4a05      	ldr	r2, [pc, #20]	; (80009bc <GPIO_WritePinValue+0x60>)
 80009a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009aa:	460a      	mov	r2, r1
 80009ac:	615a      	str	r2, [r3, #20]
			break;
 80009ae:	bf00      	nop
		}
	}
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000020 	.word	0x20000020

080009c0 <NVIC_Init>:
#include "MCAL/NVIC/NVIC_Private.h"

/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/
void NVIC_Init(void){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

	SCB_AIRCR=NVIC_GROUP_SUBSelected;
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <NVIC_Init+0x14>)
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <NVIC_Init+0x18>)
 80009c8:	601a      	str	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed0c 	.word	0xe000ed0c
 80009d8:	5fa00500 	.word	0x5fa00500

080009dc <RCC_InitSysClk>:
#include "MCAL/RCC/RCC_private.h"
#include "MCAL/RCC/RCC_config.h"
#include "LIB/stm32f103c8t6.h"


void RCC_InitSysClk(void){
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

	RCC->CR = (RCC->CR &~ (0b11111<<3)) | (RCC_HSI_TRIM<<3); /* Setting the TRIM value for HSI */
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <RCC_InitSysClk+0x7c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009e8:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <RCC_InitSysClk+0x7c>)
 80009ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ee:	6013      	str	r3, [r2, #0]
		CLR_BIT(RCC->CFGR,0); /* Select HSI as clock source from SW registers */
		CLR_BIT(RCC->CFGR,1);

	#elif (RCC_CLK_SYS == RCC_HSE)
		#if (_HSE_TYPE == RCC_HSE_BYPASS)
			SET_BIT(RCC->CR,18);
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <RCC_InitSysClk+0x7c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <RCC_InitSysClk+0x7c>)
 80009f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009fa:	6013      	str	r3, [r2, #0]
		#elif (RCC_HSE_TYPE == RCC_HSE_NOT_BYPASS)
			CLR_BIT(RCC->CR,18);
		#else
			#error"Wrong System Clock Choice"
		#endif
		SET_BIT(RCC->CR,16); /* write one bit no16 HSEON */
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <RCC_InitSysClk+0x7c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a06:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->CFGR,0); /* select HSE as system clock in SW registers */
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR,1);
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a1a:	f023 0302 	bic.w	r3, r3, #2
 8000a1e:	6053      	str	r3, [r2, #4]
	#else
		#error"Wrong System Clock Choice"
	#endif

	/* Setting the Prescaler */
	RCC->CFGR = (RCC->CFGR &~ (0b11<<14))  | (RCC_ADC_PRESCALER<<14);  /* ADC */
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a26:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a2a:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0b111<<11)) | (RCC_APB2_PRESCALER<<11); /* APB2 */
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a32:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a36:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0b111<<8))  | (RCC_APB1_PRESCALER<<8);  /* APB1 */
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a42:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0b1111<<4)) | (RCC_AHB_PRESCALER<<4);   /* AHB */
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <RCC_InitSysClk+0x7c>)
 8000a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a4e:	6053      	str	r3, [r2, #4]
	
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000

08000a5c <RCC_PeripheralClk>:

void RCC_PeripheralClk(RCC_PER_ID Copy_PeripheralId ,PER_STATE Copy_State){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	71bb      	strb	r3, [r7, #6]

	if(Copy_PeripheralId < 32) /* from 0 to 31 AHB BUS */
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b1f      	cmp	r3, #31
 8000a70:	d81b      	bhi.n	8000aaa <RCC_PeripheralClk+0x4e>
	{
		switch(Copy_State)
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00c      	beq.n	8000a92 <RCC_PeripheralClk+0x36>
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d15a      	bne.n	8000b32 <RCC_PeripheralClk+0xd6>
		{
		case RCC_Enable:
			SET_BIT(RCC->AHBENR,Copy_PeripheralId);
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	2101      	movs	r1, #1
 8000a84:	fa01 f202 	lsl.w	r2, r1, r2
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000a8c:	430b      	orrs	r3, r1
 8000a8e:	6153      	str	r3, [r2, #20]
			break;
 8000a90:	e04f      	b.n	8000b32 <RCC_PeripheralClk+0xd6>
		case RCC_Disable:
			CLR_BIT(RCC->AHBENR,Copy_PeripheralId);
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	2101      	movs	r1, #1
 8000a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9e:	43d2      	mvns	r2, r2
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000aa4:	400b      	ands	r3, r1
 8000aa6:	6153      	str	r3, [r2, #20]
			break;
 8000aa8:	e043      	b.n	8000b32 <RCC_PeripheralClk+0xd6>
		}
	}
	else if(Copy_PeripheralId < 64) /* from 32 to 63 APB2 BUS */
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b3f      	cmp	r3, #63	; 0x3f
 8000aae:	d81e      	bhi.n	8000aee <RCC_PeripheralClk+0x92>
	{
		Copy_PeripheralId -= 32;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	3b20      	subs	r3, #32
 8000ab4:	71fb      	strb	r3, [r7, #7]
		switch(Copy_State)
 8000ab6:	79bb      	ldrb	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00c      	beq.n	8000ad6 <RCC_PeripheralClk+0x7a>
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d138      	bne.n	8000b32 <RCC_PeripheralClk+0xd6>
		{
		case RCC_Enable:
			SET_BIT(RCC->APB2ENR,Copy_PeripheralId);
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6193      	str	r3, [r2, #24]
			break;
 8000ad4:	e02d      	b.n	8000b32 <RCC_PeripheralClk+0xd6>
		case RCC_Disable:
			CLR_BIT(RCC->APB2ENR,Copy_PeripheralId);
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	79fa      	ldrb	r2, [r7, #7]
 8000adc:	2101      	movs	r1, #1
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	43d2      	mvns	r2, r2
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000ae8:	400b      	ands	r3, r1
 8000aea:	6193      	str	r3, [r2, #24]
			break;
 8000aec:	e021      	b.n	8000b32 <RCC_PeripheralClk+0xd6>
		}
	}
	else if(Copy_PeripheralId < 96) /* from 64 to 95 APB1 BUS */
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b5f      	cmp	r3, #95	; 0x5f
 8000af2:	d81e      	bhi.n	8000b32 <RCC_PeripheralClk+0xd6>
	{
		Copy_PeripheralId -= 64;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	3b40      	subs	r3, #64	; 0x40
 8000af8:	71fb      	strb	r3, [r7, #7]
		switch(Copy_State)
 8000afa:	79bb      	ldrb	r3, [r7, #6]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00c      	beq.n	8000b1a <RCC_PeripheralClk+0xbe>
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d116      	bne.n	8000b32 <RCC_PeripheralClk+0xd6>
		{
		case RCC_Enable:
			SET_BIT(RCC->APB1ENR,Copy_PeripheralId);
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	61d3      	str	r3, [r2, #28]
			break;
 8000b18:	e00b      	b.n	8000b32 <RCC_PeripheralClk+0xd6>
		case RCC_Disable:
			CLR_BIT(RCC->APB1ENR,Copy_PeripheralId);
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	2101      	movs	r1, #1
 8000b22:	fa01 f202 	lsl.w	r2, r1, r2
 8000b26:	43d2      	mvns	r2, r2
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <RCC_PeripheralClk+0xe0>)
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	61d3      	str	r3, [r2, #28]
			break;
 8000b30:	bf00      	nop
		}
	}

}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000

08000b40 <SysTick_Handler>:
	*Copy_pu32ElapsedTime_PTR=(SysTK->LOAD-SysTK->VAL);
}
void SysTKGetRemainingTime    (u32 * Copy_32RemainingTime_PTR){
	*Copy_32RemainingTime_PTR=SysTK->VAL;
}
void SysTick_Handler(void){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

	/* Clear The Interrupt Flag */
	CLEAR_BIT(SysTK->CTRL,16);
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <SysTick_Handler+0x50>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <SysTick_Handler+0x50>)
 8000b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4e:	6013      	str	r3, [r2, #0]

	if(SysTK_ModeOfInterval == SysTK_SINGLE_INTERVAL)
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <SysTick_Handler+0x54>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d111      	bne.n	8000b7c <SysTick_Handler+0x3c>
	{
		/* Disable and Stop The Timer */
		CLEAR_BIT(SysTK->CTRL,0);
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <SysTick_Handler+0x50>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <SysTick_Handler+0x50>)
 8000b5e:	f023 0301 	bic.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]
		CLEAR_BIT(SysTK->CTRL,1);
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <SysTick_Handler+0x50>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <SysTick_Handler+0x50>)
 8000b6a:	f023 0302 	bic.w	r3, r3, #2
 8000b6e:	6013      	str	r3, [r2, #0]
		SysTK->LOAD = 0;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <SysTick_Handler+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
		SysTK->VAL  = 0;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SysTick_Handler+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
	}
	if(SysTK_ptr_f != NULL)
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SysTick_Handler+0x58>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <SysTick_Handler+0x4a>
	{
		SysTK_ptr_f();
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Handler+0x58>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4798      	blx	r3
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010
 8000b94:	200000a4 	.word	0x200000a4
 8000b98:	200000a8 	.word	0x200000a8

08000b9c <TIMER1_Init>:
#include "MCAL/TIMER1/TIMER1_config.h"

static void (*TIMER1_callback)(void) = NULL;

void TIMER1_Init(Count_Mode Copy_Direction , u16 Copy_u16Prescaler)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	80bb      	strh	r3, [r7, #4]
	TIMER1->CR1 = 0;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <TIMER1_Init+0x44>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
	CLR_BIT(TIMER1->CR1,7); /* Auto reload pre-load enable */
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <TIMER1_Init+0x44>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <TIMER1_Init+0x44>)
 8000bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bbc:	6013      	str	r3, [r2, #0]
	TIMER1->CR1 |= ((Copy_Direction) << 4); /* Set the direction up or down */
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <TIMER1_Init+0x44>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <TIMER1_Init+0x44>)
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	6013      	str	r3, [r2, #0]
	TIMER1->PSC = ( Copy_u16Prescaler - 1 ) ;
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	1e5a      	subs	r2, r3, #1
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <TIMER1_Init+0x44>)
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40012c00 	.word	0x40012c00

08000be4 <TIMER1_InitPwmChannel>:

void TIMER1_InitPwmChannel(PWM_CHANNEL Copy_PwmChannel)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	switch(Copy_PwmChannel)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	f200 8087 	bhi.w	8000d04 <TIMER1_InitPwmChannel+0x120>
 8000bf6:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <TIMER1_InitPwmChannel+0x18>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c4b 	.word	0x08000c4b
 8000c04:	08000c89 	.word	0x08000c89
 8000c08:	08000cc7 	.word	0x08000cc7
	{
	case TIMER1_PWM_CHANNEL1:
		SET_BIT(TIMER1->CCMR1,3);
 8000c0c:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a3f      	ldr	r2, [pc, #252]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
		TIMER1->CCMR1&= ~(0b11); /* Channel is output compare */ /* Output compare preload enable */
 8000c18:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a3c      	ldr	r2, [pc, #240]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c1e:	f023 0303 	bic.w	r3, r3, #3
 8000c22:	6193      	str	r3, [r2, #24]
		TIMER1->CCMR1 |= (0b110 << 4); /* PWM mode 1 */
 8000c24:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a39      	ldr	r2, [pc, #228]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000c2e:	6193      	str	r3, [r2, #24]
		CLR_BIT(TIMER1->CCER,1); /* high output polarity */
 8000c30:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	4a36      	ldr	r2, [pc, #216]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c36:	f023 0302 	bic.w	r3, r3, #2
 8000c3a:	6213      	str	r3, [r2, #32]
		CLR_BIT(TIMER1->CCER,0); /* Output enable */
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c42:	f023 0301 	bic.w	r3, r3, #1
 8000c46:	6213      	str	r3, [r2, #32]
		break;
 8000c48:	e05c      	b.n	8000d04 <TIMER1_InitPwmChannel+0x120>

	case TIMER1_PWM_CHANNEL2:
		TIMER1->CCMR1 &= ~(0b11<<8);
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a30      	ldr	r2, [pc, #192]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c54:	6193      	str	r3, [r2, #24]
		SET_BIT(TIMER1->CCMR1,11);
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	4a2d      	ldr	r2, [pc, #180]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c60:	6193      	str	r3, [r2, #24]
		TIMER1->CCMR1 |= (0b110 << 12);
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c68:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000c6c:	6193      	str	r3, [r2, #24]
		CLR_BIT(TIMER1->CCER,5);
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c74:	f023 0320 	bic.w	r3, r3, #32
 8000c78:	6213      	str	r3, [r2, #32]
		CLR_BIT(TIMER1->CCER,4);
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c7c:	6a1b      	ldr	r3, [r3, #32]
 8000c7e:	4a24      	ldr	r2, [pc, #144]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c80:	f023 0310 	bic.w	r3, r3, #16
 8000c84:	6213      	str	r3, [r2, #32]
		break;
 8000c86:	e03d      	b.n	8000d04 <TIMER1_InitPwmChannel+0x120>

	case TIMER1_PWM_CHANNEL3:
		TIMER1->CCMR2 &= ~(0b11);
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c8e:	f023 0303 	bic.w	r3, r3, #3
 8000c92:	61d3      	str	r3, [r2, #28]
		SET_BIT(TIMER1->CCMR2,3);
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000c9a:	f043 0308 	orr.w	r3, r3, #8
 8000c9e:	61d3      	str	r3, [r2, #28]
		TIMER1->CCMR2 |= (0b110 << 4);
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000ca6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000caa:	61d3      	str	r3, [r2, #28]
		CLR_BIT(TIMER1->CCER,9);
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cb6:	6213      	str	r3, [r2, #32]
		CLR_BIT(TIMER1->CCER,8);
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cc2:	6213      	str	r3, [r2, #32]
		break;
 8000cc4:	e01e      	b.n	8000d04 <TIMER1_InitPwmChannel+0x120>

	case TIMER1_PWM_CHANNEL4:
		TIMER1->CCMR2 &= ~(0b11<<8);
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cd0:	61d3      	str	r3, [r2, #28]
		SET_BIT(TIMER1->CCMR2,11);
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cdc:	61d3      	str	r3, [r2, #28]
		TIMER1->CCMR2 |= (0b110 << 12);
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000ce4:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000ce8:	61d3      	str	r3, [r2, #28]
		CLR_BIT(TIMER1->CCER,13);
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cf4:	6213      	str	r3, [r2, #32]
		CLR_BIT(TIMER1->CCER,12);
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <TIMER1_InitPwmChannel+0x12c>)
 8000cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d00:	6213      	str	r3, [r2, #32]
		break;
 8000d02:	bf00      	nop
	}

}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40012c00 	.word	0x40012c00

08000d14 <TIMER1_SetFREQ>:

	}

}
void TIMER1_SetFREQ(PWM_CHANNEL Copy_PwmChannel , u32 Copy_PwmFrequency)
{
 8000d14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	4601      	mov	r1, r0
 8000d20:	71f9      	strb	r1, [r7, #7]
	    u16 ARR_Value = ((u64)(F_CPU /((u64)Copy_PwmFrequency *(TIMER1->PSC + 1))) - 1);
 8000d22:	6839      	ldr	r1, [r7, #0]
 8000d24:	2000      	movs	r0, #0
 8000d26:	4688      	mov	r8, r1
 8000d28:	4681      	mov	r9, r0
 8000d2a:	4918      	ldr	r1, [pc, #96]	; (8000d8c <TIMER1_SetFREQ+0x78>)
 8000d2c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000d2e:	3101      	adds	r1, #1
 8000d30:	2000      	movs	r0, #0
 8000d32:	460c      	mov	r4, r1
 8000d34:	4605      	mov	r5, r0
 8000d36:	fb04 f009 	mul.w	r0, r4, r9
 8000d3a:	fb08 f105 	mul.w	r1, r8, r5
 8000d3e:	4401      	add	r1, r0
 8000d40:	fba8 2304 	umull	r2, r3, r8, r4
 8000d44:	4419      	add	r1, r3
 8000d46:	460b      	mov	r3, r1
 8000d48:	4811      	ldr	r0, [pc, #68]	; (8000d90 <TIMER1_SetFREQ+0x7c>)
 8000d4a:	f04f 0100 	mov.w	r1, #0
 8000d4e:	f7ff fa0f 	bl	8000170 <__aeabi_uldivmod>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	b293      	uxth	r3, r2
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	81fb      	strh	r3, [r7, #14]
	    if(Copy_PwmChannel>=TIMER1_PWM_CHANNEL1 && Copy_PwmChannel<=TIMER1_PWM_CHANNEL4){
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d80e      	bhi.n	8000d80 <TIMER1_SetFREQ+0x6c>
			TIMER1->ARR = ARR_Value ; 																								/* Setup Frequency */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <TIMER1_SetFREQ+0x78>)
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	62d3      	str	r3, [r2, #44]	; 0x2c
			SET_BIT(TIMER1->BDTR,15); 																						/* Enable MOE */
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <TIMER1_SetFREQ+0x78>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <TIMER1_SetFREQ+0x78>)
 8000d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d72:	6453      	str	r3, [r2, #68]	; 0x44
			SET_BIT(TIMER1->CR1,0); 																						/* Enable the timer */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <TIMER1_SetFREQ+0x78>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <TIMER1_SetFREQ+0x78>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]
	    }

}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40012c00 	.word	0x40012c00
 8000d90:	007a1200 	.word	0x007a1200

08000d94 <TIMER1_Set_CRR_Value>:
			//SET_BIT(TIMER1->CR1,0); 																						/* Enable the timer */
	    }

}
void TIMER1_Set_CRR_Value(PWM_CHANNEL Copy_PwmChannel , u16 Copy_Value )
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	80bb      	strh	r3, [r7, #4]
	if( Copy_Value < 65536)
	{
	    if(Copy_PwmChannel>=TIMER1_PWM_CHANNEL1 && Copy_PwmChannel<=TIMER1_PWM_CHANNEL4){																							/* Setup Frequency */
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d812      	bhi.n	8000dd0 <TIMER1_Set_CRR_Value+0x3c>
			TIMER1->CCR[Copy_PwmChannel] = Copy_Value; 																							/* Setup Duty Cycle */
 8000daa:	490c      	ldr	r1, [pc, #48]	; (8000ddc <TIMER1_Set_CRR_Value+0x48>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	88ba      	ldrh	r2, [r7, #4]
 8000db0:	330c      	adds	r3, #12
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	605a      	str	r2, [r3, #4]
			SET_BIT(TIMER1->BDTR,15); 																						/* Enable MOE */
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <TIMER1_Set_CRR_Value+0x48>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <TIMER1_Set_CRR_Value+0x48>)
 8000dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc2:	6453      	str	r3, [r2, #68]	; 0x44
			SET_BIT(TIMER1->CR1,0); 																						/* Enable the timer */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <TIMER1_Set_CRR_Value+0x48>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <TIMER1_Set_CRR_Value+0x48>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]
	    }

	}
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <TIM1_UP_IRQHandler>:
}
/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	if(TIMER1_callback != NULL)
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <TIM1_UP_IRQHandler+0x24>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <TIM1_UP_IRQHandler+0x12>
	{
		TIMER1_callback();
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <TIM1_UP_IRQHandler+0x24>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4798      	blx	r3
	}
	CLR_BIT(TIMER1->SR,0); /* Clear the update flag */
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <TIM1_UP_IRQHandler+0x28>)
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <TIM1_UP_IRQHandler+0x28>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6113      	str	r3, [r2, #16]
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000ac 	.word	0x200000ac
 8000e08:	40012c00 	.word	0x40012c00

08000e0c <USART1_IRQHandler>:
	}
}


void USART1_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	CLEAR_BIT(UART1->SR,5); /* Clear the flag */
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <USART1_IRQHandler+0x24>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <USART1_IRQHandler+0x24>)
 8000e16:	f023 0320 	bic.w	r3, r3, #32
 8000e1a:	6013      	str	r3, [r2, #0]
	if(UART_SetCallbacks[0] != NULL)
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <USART1_IRQHandler+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <USART1_IRQHandler+0x1e>
	{
		UART_SetCallbacks[0]();
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <USART1_IRQHandler+0x28>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4798      	blx	r3
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40013800 	.word	0x40013800
 8000e34:	200000b0 	.word	0x200000b0

08000e38 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	CLEAR_BIT(UART2->SR,5); /* Clear the flag */
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <USART2_IRQHandler+0x24>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <USART2_IRQHandler+0x24>)
 8000e42:	f023 0320 	bic.w	r3, r3, #32
 8000e46:	6013      	str	r3, [r2, #0]
	if(UART_SetCallbacks[1] != NULL)
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <USART2_IRQHandler+0x28>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <USART2_IRQHandler+0x1e>
	{
		UART_SetCallbacks[1]();
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <USART2_IRQHandler+0x28>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4798      	blx	r3
	}
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	200000b0 	.word	0x200000b0

08000e64 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	//UART_DATA=(u8)UART_IDS[2]->DR;
	CLEAR_BIT(UART3->SR,5); /* Clear the flag */
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <USART3_IRQHandler+0x24>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <USART3_IRQHandler+0x24>)
 8000e6e:	f023 0320 	bic.w	r3, r3, #32
 8000e72:	6013      	str	r3, [r2, #0]
	if(UART_SetCallbacks[2]!= NULL)
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <USART3_IRQHandler+0x28>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <USART3_IRQHandler+0x1e>
	{
		UART_SetCallbacks[2]();
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <USART3_IRQHandler+0x28>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4798      	blx	r3
	}
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40004800 	.word	0x40004800
 8000e8c:	200000b0 	.word	0x200000b0

08000e90 <_delay_ms>:
 * 	SW: delay
 */
#include "LIB/ellithy_delay.h"
#include "LIB/STD_TYPES.h"
/*	for F_CPU = 8mhz */
void _delay_ms(u16 delay_in_ms){
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
	u16 i,j,fact=((u16)(F_CPU/8000000u));
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	817b      	strh	r3, [r7, #10]
	fact*=993;
 8000e9e:	897b      	ldrh	r3, [r7, #10]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	0152      	lsls	r2, r2, #5
 8000ea4:	1ad2      	subs	r2, r2, r3
 8000ea6:	0152      	lsls	r2, r2, #5
 8000ea8:	4413      	add	r3, r2
 8000eaa:	817b      	strh	r3, [r7, #10]
	for(i=0;i<delay_in_ms; i++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	81fb      	strh	r3, [r7, #14]
 8000eb0:	e00d      	b.n	8000ece <_delay_ms+0x3e>
	{
		for(j= 0 ; j < fact ; j++ )
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	81bb      	strh	r3, [r7, #12]
 8000eb6:	e003      	b.n	8000ec0 <_delay_ms+0x30>
		{
		__asm__("nop");
 8000eb8:	bf00      	nop
		for(j= 0 ; j < fact ; j++ )
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	81bb      	strh	r3, [r7, #12]
 8000ec0:	89ba      	ldrh	r2, [r7, #12]
 8000ec2:	897b      	ldrh	r3, [r7, #10]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3f7      	bcc.n	8000eb8 <_delay_ms+0x28>
	for(i=0;i<delay_in_ms; i++)
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	81fb      	strh	r3, [r7, #14]
 8000ece:	89fa      	ldrh	r2, [r7, #14]
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3ed      	bcc.n	8000eb2 <_delay_ms+0x22>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <main>:

//delay for smooth movements
void setAngle(ServoID_t servo_ID, u8 angle);

int main(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
		RCC_InitSysClk();
 8000ee8:	f7ff fd78 	bl	80009dc <RCC_InitSysClk>
		RCC_PeripheralClk(RCC_GPIOA, RCC_Enable);
 8000eec:	2101      	movs	r1, #1
 8000eee:	2022      	movs	r0, #34	; 0x22
 8000ef0:	f7ff fdb4 	bl	8000a5c <RCC_PeripheralClk>
		RCC_PeripheralClk(RCC_AFIO,   RCC_Enable);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2020      	movs	r0, #32
 8000ef8:	f7ff fdb0 	bl	8000a5c <RCC_PeripheralClk>
		/*
		RCC_PeripheralClk(RCC_USART2, RCC_Enable);
		RCC_PeripheralClk(RCC_TIM1, RCC_Enable);
		RCC_PeripheralClk(RCC_DMA1, RCC_Enable);
		*/
		GPIO_PORT_voidInit();
 8000efc:	f7ff fc1a 	bl	8000734 <GPIO_PORT_voidInit>
		TIMER1_Init(TIMER1_COUNT_UP,4);
 8000f00:	2104      	movs	r1, #4
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fe4a 	bl	8000b9c <TIMER1_Init>
		NVIC_Init();
 8000f08:	f7ff fd5a 	bl	80009c0 <NVIC_Init>
		SERVO_Init(SERVO_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f7ff faaf 	bl	8000470 <SERVO_Init>
		NVIC_EnableInterrupt(NVIC_DMA1_CHANNEL6);
		NVIC_EnableInterrupt(NVIC_USART2);
		EEG_CMD=INIT_STATE;
		solveCMD();
		*/
		u8 angle=RELEASE_MOST_ANGLE;
 8000f12:	230a      	movs	r3, #10
 8000f14:	71fb      	strb	r3, [r7, #7]
		while(1){
			if(angle>GRAB_MOST_ANGLE){
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b78      	cmp	r3, #120	; 0x78
 8000f1a:	d901      	bls.n	8000f20 <main+0x3e>
				angle=RELEASE_MOST_ANGLE;
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	71fb      	strb	r3, [r7, #7]
			}
			setAngle(Servo_GRABBER, angle);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4619      	mov	r1, r3
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f805 	bl	8000f34 <setAngle>
			angle++;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	71fb      	strb	r3, [r7, #7]
			if(angle>GRAB_MOST_ANGLE){
 8000f30:	e7f1      	b.n	8000f16 <main+0x34>
	...

08000f34 <setAngle>:
	setAngle(Servo_GRABBER, RELEASE_MOST_ANGLE);
	setAngle(Servo_FORWARD_BACKWARD, (FORWARD_MOST_ANGLE + BACK_MOST_ANGLE) / 2);
	setAngle(Servo_UP_DOWN, (UP_MOST_ANGLE + DOWN_MOST_ANGLE) / 2);
}

void setAngle(ServoID_t servo_ID, u8 targetAngle) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]

  u8 currentAngle = arrServoLastValue[servo_ID];
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4a19      	ldr	r2, [pc, #100]	; (8000fac <setAngle+0x78>)
 8000f48:	5cd3      	ldrb	r3, [r2, r3]
 8000f4a:	73bb      	strb	r3, [r7, #14]
  if (currentAngle == targetAngle){
 8000f4c:	7bba      	ldrb	r2, [r7, #14]
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d027      	beq.n	8000fa4 <setAngle+0x70>
	  return;
  }
  else {
	  arrServoLastValue[servo_ID]=targetAngle;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4915      	ldr	r1, [pc, #84]	; (8000fac <setAngle+0x78>)
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	54ca      	strb	r2, [r1, r3]
	  s8 step = (targetAngle > currentAngle) ? 1 : -1;
 8000f5c:	79ba      	ldrb	r2, [r7, #6]
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d901      	bls.n	8000f68 <setAngle+0x34>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e001      	b.n	8000f6c <setAngle+0x38>
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	737b      	strb	r3, [r7, #13]
	  for (u8 angle = currentAngle; angle != targetAngle; angle += step) {
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e00c      	b.n	8000f8e <setAngle+0x5a>
		  Servo_setAngle(servo_ID,angle);
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fa90 	bl	80004a0 <Servo_setAngle>
	      _delay_ms(50);
 8000f80:	2032      	movs	r0, #50	; 0x32
 8000f82:	f7ff ff85 	bl	8000e90 <_delay_ms>
	  for (u8 angle = currentAngle; angle != targetAngle; angle += step) {
 8000f86:	7b7a      	ldrb	r2, [r7, #13]
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d1ee      	bne.n	8000f74 <setAngle+0x40>
	  }
	  Servo_setAngle(servo_ID,targetAngle);
 8000f96:	79ba      	ldrb	r2, [r7, #6]
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fa7f 	bl	80004a0 <Servo_setAngle>
	  return;
 8000fa2:	e000      	b.n	8000fa6 <setAngle+0x72>
	  return;
 8000fa4:	bf00      	nop
  }
}
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200000bc 	.word	0x200000bc

08000fb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	; (8000ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	; (8000ffc <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fde:	f000 f811 	bl	8001004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff ff7e 	bl	8000ee2 <main>

08000fe6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   r0, =_estack
 8000fe8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000ff4:	08001074 	.word	0x08001074
  ldr r2, =_sbss
 8000ff8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000ffc:	200000c0 	.word	0x200000c0

08001000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_2_IRQHandler>
	...

08001004 <__libc_init_array>:
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	2600      	movs	r6, #0
 8001008:	4d0c      	ldr	r5, [pc, #48]	; (800103c <__libc_init_array+0x38>)
 800100a:	4c0d      	ldr	r4, [pc, #52]	; (8001040 <__libc_init_array+0x3c>)
 800100c:	1b64      	subs	r4, r4, r5
 800100e:	10a4      	asrs	r4, r4, #2
 8001010:	42a6      	cmp	r6, r4
 8001012:	d109      	bne.n	8001028 <__libc_init_array+0x24>
 8001014:	f000 f81a 	bl	800104c <_init>
 8001018:	2600      	movs	r6, #0
 800101a:	4d0a      	ldr	r5, [pc, #40]	; (8001044 <__libc_init_array+0x40>)
 800101c:	4c0a      	ldr	r4, [pc, #40]	; (8001048 <__libc_init_array+0x44>)
 800101e:	1b64      	subs	r4, r4, r5
 8001020:	10a4      	asrs	r4, r4, #2
 8001022:	42a6      	cmp	r6, r4
 8001024:	d105      	bne.n	8001032 <__libc_init_array+0x2e>
 8001026:	bd70      	pop	{r4, r5, r6, pc}
 8001028:	f855 3b04 	ldr.w	r3, [r5], #4
 800102c:	4798      	blx	r3
 800102e:	3601      	adds	r6, #1
 8001030:	e7ee      	b.n	8001010 <__libc_init_array+0xc>
 8001032:	f855 3b04 	ldr.w	r3, [r5], #4
 8001036:	4798      	blx	r3
 8001038:	3601      	adds	r6, #1
 800103a:	e7f2      	b.n	8001022 <__libc_init_array+0x1e>
 800103c:	0800106c 	.word	0x0800106c
 8001040:	0800106c 	.word	0x0800106c
 8001044:	0800106c 	.word	0x0800106c
 8001048:	08001070 	.word	0x08001070

0800104c <_init>:
 800104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104e:	bf00      	nop
 8001050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001052:	bc08      	pop	{r3}
 8001054:	469e      	mov	lr, r3
 8001056:	4770      	bx	lr

08001058 <_fini>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	bf00      	nop
 800105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105e:	bc08      	pop	{r3}
 8001060:	469e      	mov	lr, r3
 8001062:	4770      	bx	lr
